// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DataRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DataRequest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DataRequest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DataRequest", id.toString(), this);
  }

  static load(id: string): DataRequest | null {
    return store.get("DataRequest", id) as DataRequest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get seed(): string | null {
    let value = this.get("seed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seed(value: string | null) {
    if (value === null) {
      this.unset("seed");
    } else {
      this.set("seed", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get bounty(): BigInt | null {
    let value = this.get("bounty");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bounty(value: BigInt | null) {
    if (value === null) {
      this.unset("bounty");
    } else {
      this.set("bounty", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (value === null) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(value as BigInt));
    }
  }
}

export class RelayProof extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RelayProof entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RelayProof entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RelayProof", id.toString(), this);
  }

  static load(id: string): RelayProof | null {
    return store.get("RelayProof", id) as RelayProof | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seed(): string | null {
    let value = this.get("seed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seed(value: string | null) {
    if (value === null) {
      this.unset("seed");
    } else {
      this.set("seed", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }
}
