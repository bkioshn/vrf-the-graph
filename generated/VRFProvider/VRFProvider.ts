// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RandomDataRelayed extends ethereum.Event {
  get params(): RandomDataRelayed__Params {
    return new RandomDataRelayed__Params(this);
  }
}

export class RandomDataRelayed__Params {
  _event: RandomDataRelayed;

  constructor(event: RandomDataRelayed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seed(): string {
    return this._event.parameters[1].value.toString();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get taskKey(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get result(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class RandomDataRequested extends ethereum.Event {
  get params(): RandomDataRequested__Params {
    return new RandomDataRequested__Params(this);
  }
}

export class RandomDataRequested__Params {
  _event: RandomDataRequested;

  constructor(event: RandomDataRequested) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seed(): string {
    return this._event.parameters[1].value.toString();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get taskKey(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get bounty(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VRFProvider__tasksResult {
  value0: Address;
  value1: BigInt;
  value2: boolean;
  value3: Bytes;

  constructor(value0: Address, value1: BigInt, value2: boolean, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }
}

export class VRFProvider extends ethereum.SmartContract {
  static bind(address: Address): VRFProvider {
    return new VRFProvider("VRFProvider", address);
  }

  askCount(): BigInt {
    let result = super.call("askCount", "askCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_askCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("askCount", "askCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bridge(): Address {
    let result = super.call("bridge", "bridge():(address)", []);

    return result[0].toAddress();
  }

  try_bridge(): ethereum.CallResult<Address> {
    let result = super.tryCall("bridge", "bridge():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getKey(caller: Address, seed: string, time: BigInt): Bytes {
    let result = super.call(
      "getKey",
      "getKey(address,string,uint64):(bytes32)",
      [
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromString(seed),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );

    return result[0].toBytes();
  }

  try_getKey(
    caller: Address,
    seed: string,
    time: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getKey",
      "getKey(address,string,uint64):(bytes32)",
      [
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromString(seed),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  minCount(): BigInt {
    let result = super.call("minCount", "minCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minCount", "minCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleScriptID(): BigInt {
    let result = super.call("oracleScriptID", "oracleScriptID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oracleScriptID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oracleScriptID",
      "oracleScriptID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tasks(param0: Bytes): VRFProvider__tasksResult {
    let result = super.call(
      "tasks",
      "tasks(bytes32):(address,uint256,bool,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new VRFProvider__tasksResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBytes()
    );
  }

  try_tasks(param0: Bytes): ethereum.CallResult<VRFProvider__tasksResult> {
    let result = super.tryCall(
      "tasks",
      "tasks(bytes32):(address,uint256,bool,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VRFProvider__tasksResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBytes()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _bridge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleScriptID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _askCount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RelayProofCall extends ethereum.Call {
  get inputs(): RelayProofCall__Inputs {
    return new RelayProofCall__Inputs(this);
  }

  get outputs(): RelayProofCall__Outputs {
    return new RelayProofCall__Outputs(this);
  }
}

export class RelayProofCall__Inputs {
  _call: RelayProofCall;

  constructor(call: RelayProofCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proof(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RelayProofCall__Outputs {
  _call: RelayProofCall;

  constructor(call: RelayProofCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestRandomDataCall extends ethereum.Call {
  get inputs(): RequestRandomDataCall__Inputs {
    return new RequestRandomDataCall__Inputs(this);
  }

  get outputs(): RequestRandomDataCall__Outputs {
    return new RequestRandomDataCall__Outputs(this);
  }
}

export class RequestRandomDataCall__Inputs {
  _call: RequestRandomDataCall;

  constructor(call: RequestRandomDataCall) {
    this._call = call;
  }

  get seed(): string {
    return this._call.inputValues[0].value.toString();
  }

  get time(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestRandomDataCall__Outputs {
  _call: RequestRandomDataCall;

  constructor(call: RequestRandomDataCall) {
    this._call = call;
  }
}

export class SetAskCountCall extends ethereum.Call {
  get inputs(): SetAskCountCall__Inputs {
    return new SetAskCountCall__Inputs(this);
  }

  get outputs(): SetAskCountCall__Outputs {
    return new SetAskCountCall__Outputs(this);
  }
}

export class SetAskCountCall__Inputs {
  _call: SetAskCountCall;

  constructor(call: SetAskCountCall) {
    this._call = call;
  }

  get _askCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAskCountCall__Outputs {
  _call: SetAskCountCall;

  constructor(call: SetAskCountCall) {
    this._call = call;
  }
}

export class SetBridgeCall extends ethereum.Call {
  get inputs(): SetBridgeCall__Inputs {
    return new SetBridgeCall__Inputs(this);
  }

  get outputs(): SetBridgeCall__Outputs {
    return new SetBridgeCall__Outputs(this);
  }
}

export class SetBridgeCall__Inputs {
  _call: SetBridgeCall;

  constructor(call: SetBridgeCall) {
    this._call = call;
  }

  get _bridge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBridgeCall__Outputs {
  _call: SetBridgeCall;

  constructor(call: SetBridgeCall) {
    this._call = call;
  }
}

export class SetMinCountCall extends ethereum.Call {
  get inputs(): SetMinCountCall__Inputs {
    return new SetMinCountCall__Inputs(this);
  }

  get outputs(): SetMinCountCall__Outputs {
    return new SetMinCountCall__Outputs(this);
  }
}

export class SetMinCountCall__Inputs {
  _call: SetMinCountCall;

  constructor(call: SetMinCountCall) {
    this._call = call;
  }

  get _minCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinCountCall__Outputs {
  _call: SetMinCountCall;

  constructor(call: SetMinCountCall) {
    this._call = call;
  }
}

export class SetOracleScriptIDCall extends ethereum.Call {
  get inputs(): SetOracleScriptIDCall__Inputs {
    return new SetOracleScriptIDCall__Inputs(this);
  }

  get outputs(): SetOracleScriptIDCall__Outputs {
    return new SetOracleScriptIDCall__Outputs(this);
  }
}

export class SetOracleScriptIDCall__Inputs {
  _call: SetOracleScriptIDCall;

  constructor(call: SetOracleScriptIDCall) {
    this._call = call;
  }

  get _oracleScriptID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOracleScriptIDCall__Outputs {
  _call: SetOracleScriptIDCall;

  constructor(call: SetOracleScriptIDCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
